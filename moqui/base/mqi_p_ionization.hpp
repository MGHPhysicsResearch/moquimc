#ifndef MQI_P_IONIZATION_HPP
#define MQI_P_IONIZATION_HPP

#include <moqui/base/mqi_interaction.hpp>

namespace mqi
{

///< Data table (from Geant4 TestEm0. Ei = 0.1 * MeV,  Ef = 299.6 MeV, dE = 0.5 MeV, Te_cut = 0.1 mm (85.1138 keV)
///<  - Cross-section (per )  mm2/g
CUDA_CONSTANT const float cs_p_ion_table[600] = {
    0,       0,       0,       0,       0,       0,       0,       0,       0,       0,
    0,       0,       0,       0,       0,       0,       0,       0,       0,       0,
    0,       0,       0,       0,       0,       0,       0,       0,       0,       0,
    0,       0,       0,       0,       0,       0,       0,       0,       0,       0,
    0,       0,       0,       0,       0,       0,       0,       0,       0,       0,
    0,       0,       0,       0,       0,       0,       0,       0,       0,       0,
    0,       0,       0,       0,       0,       0,       0,       0,       0,       0,
    0,       0,       0,       0,       0,       0,       0,       8.45353, 23.6047, 38.0017,
    51.6867, 64.6992, 77.076,  88.8515, 100.058, 110.726, 120.883, 130.557, 139.772, 148.552,
    156.919, 164.894, 172.497, 179.745, 186.656, 193.247, 199.534, 205.53,  211.25,  216.706,
    221.912, 226.878, 231.616, 236.137, 240.449, 244.564, 248.489, 252.233, 255.804, 259.21,
    262.458, 265.554, 268.507, 271.32,  274.002, 276.557, 278.99,  281.307, 283.513, 285.612,
    287.608, 289.507, 291.311, 293.026, 294.653, 296.198, 297.663, 299.052, 300.367, 301.612,
    302.789, 303.902, 304.951, 305.941, 306.874, 307.75,  308.574, 309.347, 310.07,  310.746,
    311.377, 311.964, 312.509, 313.013, 313.479, 313.907, 314.299, 314.657, 314.981, 315.273,
    315.535, 315.766, 315.97,  316.145, 316.294, 316.418, 316.517, 316.593, 316.646, 316.677,
    316.687, 316.676, 316.646, 316.598, 316.531, 316.447, 316.346, 316.229, 316.097, 315.95,
    315.788, 315.612, 315.424, 315.222, 315.008, 314.783, 314.545, 314.297, 314.039, 313.77,
    313.492, 313.204, 312.908, 312.602, 312.289, 311.967, 311.638, 311.302, 310.958, 310.608,
    310.251, 309.888, 309.52,  309.145, 308.765, 308.38,  307.99,  307.595, 307.195, 306.791,
    306.383, 305.971, 305.556, 305.136, 304.713, 304.287, 303.858, 303.426, 302.991, 302.553,
    302.113, 301.67,  301.225, 300.778, 300.329, 299.878, 299.426, 298.971, 298.516, 298.058,
    297.599, 297.14,  296.678, 296.216, 295.753, 295.289, 294.824, 294.358, 293.892, 293.425,
    292.958, 292.49,  292.022, 291.553, 291.084, 290.615, 290.146, 289.677, 289.208, 288.738,
    288.269, 287.8,   287.332, 286.863, 286.395, 285.927, 285.459, 284.992, 284.525, 284.059,
    283.593, 283.128, 282.663, 282.199, 281.735, 281.272, 280.81,  280.349, 279.888, 279.429,
    278.97,  278.511, 278.054, 277.598, 277.142, 276.687, 276.234, 275.781, 275.329, 274.878,
    274.429, 273.98,  273.532, 273.086, 272.64,  272.196, 271.752, 271.31,  270.869, 270.429,
    269.99,  269.552, 269.116, 268.68,  268.246, 267.813, 267.382, 266.951, 266.522, 266.094,
    265.667, 265.241, 264.817, 264.394, 263.972, 263.551, 263.132, 262.714, 262.297, 261.882,
    261.468, 261.055, 260.643, 260.233, 259.824, 259.416, 259.01,  258.605, 258.201, 257.798,
    257.397, 256.997, 256.599, 256.201, 255.805, 255.411, 255.017, 254.625, 254.235, 253.845,
    253.457, 253.07,  252.685, 252.301, 251.918, 251.536, 251.156, 250.777, 250.399, 250.023,
    249.648, 249.274, 248.902, 248.53,  248.161, 247.792, 247.425, 247.059, 246.694, 246.33,
    245.968, 245.607, 245.247, 244.889, 244.532, 244.176, 243.821, 243.468, 243.116, 242.765,
    242.415, 242.067, 241.72,  241.374, 241.029, 240.686, 240.343, 240.002, 239.662, 239.324,
    238.986, 238.65,  238.315, 237.981, 237.649, 237.317, 236.987, 236.658, 236.33,  236.004,
    235.678, 235.354, 235.031, 234.708, 234.388, 234.068, 233.749, 233.432, 233.115, 232.8,
    232.486, 232.173, 231.861, 231.551, 231.241, 230.933, 230.625, 230.319, 230.014, 229.71,
    229.407, 229.105, 228.804, 228.504, 228.206, 227.908, 227.611, 227.316, 227.021, 226.728,
    226.436, 226.144, 225.854, 225.565, 225.277, 224.989, 224.703, 224.418, 224.134, 223.851,
    223.569, 223.287, 223.007, 222.728, 222.45,  222.173, 221.897, 221.621, 221.347, 221.074,
    220.802, 220.53,  220.26,  219.99,  219.722, 219.454, 219.188, 218.922, 218.657, 218.393,
    218.13,  217.868, 217.607, 217.347, 217.088, 216.829, 216.572, 216.315, 216.06,  215.805,
    215.551, 215.298, 215.046, 214.795, 214.544, 214.295, 214.046, 213.798, 213.551, 213.305,
    213.06,  212.815, 212.572, 212.329, 212.087, 211.846, 211.606, 211.366, 211.128, 210.89,
    210.653, 210.417, 210.181, 209.947, 209.713, 209.48,  209.248, 209.017, 208.786, 208.556,
    208.327, 208.099, 207.871, 207.644, 207.418, 207.193, 206.969, 206.745, 206.522, 206.3,
    206.078, 205.857, 205.637, 205.418, 205.2,   204.982, 204.765, 204.548, 204.333, 204.118,
    203.903, 203.69,  203.477, 203.265, 203.053, 202.843, 202.633, 202.423, 202.215, 202.007,
    201.799, 201.593, 201.387, 201.182, 200.977, 200.773, 200.57,  200.367, 200.165, 199.964,
    199.763, 199.563, 199.364, 199.165, 198.967, 198.77,  198.573, 198.377, 198.181, 197.987,
    197.792, 197.599, 197.406, 197.213, 197.021, 196.83,  196.64,  196.45,  196.26,  196.072,
    195.883, 195.696, 195.509, 195.322, 195.137, 194.951, 194.767, 194.583, 194.399, 194.216,
    194.034, 193.852, 193.671, 193.491, 193.311, 193.131, 192.952, 192.774, 192.596, 192.419,
    192.242, 192.066, 191.89,  191.715, 191.541, 191.367, 191.193, 191.02,  190.848, 190.676,
    190.505, 190.334, 190.164, 189.994, 189.825, 189.656, 189.488, 189.32,  189.153, 188.986,
    188.82,  188.654, 188.489, 188.324, 188.16,  187.996, 187.833, 187.671, 187.508, 187.347,
    187.185, 187.025, 186.864, 186.705, 186.545, 186.386, 186.228, 186.07,  185.913, 185.756,
    185.599, 185.443, 185.288, 185.133, 184.978, 184.824, 184.67,  184.517, 184.364, 184.211
};
////Total stopping power (I=75 eV)  from Geant4
CUDA_CONSTANT const float restricted_stopping_power_table[600] = {
    96.14890, 37.78070, 25.01300, 19.19030, 15.72410, 13.29680, 11.59950, 10.30940, 9.32706,
    8.52858,  7.87007,  7.30757,  6.82805,  6.41238,  6.04993,  5.73076,  5.44499,  5.18804,
    4.95664,  4.74746,  4.55726,  4.38310,  4.22243,  4.07389,  3.93642,  3.80893,  3.69031,
    3.57953,  3.47583,  3.37857,  3.28715,  3.20105,  3.11984,  3.04307,  2.97035,  2.90138,
    2.83590,  2.77360,  2.71426,  2.65768,  2.60368,  2.55206,  2.50266,  2.45534,  2.40999,
    2.36647,  2.32466,  2.28447,  2.24580,  2.20858,  2.17271,  2.13813,  2.10476,  2.07253,
    2.04139,  2.01129,  1.98217,  1.95398,  1.92666,  1.90019,  1.87453,  1.84965,  1.82552,
    1.80211,  1.77938,  1.75730,  1.73584,  1.71496,  1.69462,  1.67479,  1.65543,  1.63651,
    1.61799,  1.59985,  1.58209,  1.56467,  1.54758,  1.53080,  1.51431,  1.49810,  1.48215,
    1.46646,  1.45103,  1.43588,  1.42101,  1.40644,  1.39216,  1.37818,  1.36451,  1.35117,
    1.33813,  1.32540,  1.31296,  1.30080,  1.28890,  1.27726,  1.26586,  1.25469,  1.24374,
    1.23300,  1.22246,  1.21210,  1.20194,  1.19196,  1.18216,  1.17254,  1.16309,  1.15381,
    1.14470,  1.13575,  1.12695,  1.11831,  1.10982,  1.10148,  1.09327,  1.08521,  1.07728,
    1.06949,  1.06182,  1.05428,  1.04687,  1.03957,  1.03238,  1.02531,  1.01835,  1.01149,
    1.00474,  0.99809,  0.99154,  0.98509,  0.97874,  0.97247,  0.96630,  0.96022,  0.95423,
    0.94833,  0.94251,  0.93677,  0.93111,  0.92553,  0.92002,  0.91459,  0.90924,  0.90395,
    0.89874,  0.89360,  0.88853,  0.88352,  0.87858,  0.87371,  0.86889,  0.86415,  0.85945,
    0.85482,  0.85025,  0.84574,  0.84127,  0.83687,  0.83252,  0.82822,  0.82397,  0.81978,
    0.81563,  0.81153,  0.80749,  0.80349,  0.79954,  0.79563,  0.79177,  0.78795,  0.78418,
    0.78045,  0.77676,  0.77311,  0.76950,  0.76594,  0.76241,  0.75892,  0.75547,  0.75205,
    0.74867,  0.74533,  0.74203,  0.73876,  0.73552,  0.73232,  0.72915,  0.72602,  0.72292,
    0.71985,  0.71681,  0.71380,  0.71082,  0.70788,  0.70496,  0.70207,  0.69920,  0.69637,
    0.69357,  0.69079,  0.68804,  0.68531,  0.68261,  0.67994,  0.67730,  0.67468,  0.67208,
    0.66951,  0.66696,  0.66444,  0.66194,  0.65946,  0.65700,  0.65457,  0.65216,  0.64977,
    0.64740,  0.64506,  0.64273,  0.64043,  0.63814,  0.63588,  0.63363,  0.63141,  0.62920,
    0.62702,  0.62485,  0.62270,  0.62057,  0.61846,  0.61637,  0.61429,  0.61223,  0.61019,
    0.60816,  0.60616,  0.60416,  0.60219,  0.60023,  0.59829,  0.59636,  0.59445,  0.59255,
    0.59067,  0.58881,  0.58695,  0.58512,  0.58330,  0.58149,  0.57969,  0.57791,  0.57615,
    0.57439,  0.57266,  0.57093,  0.56922,  0.56752,  0.56584,  0.56416,  0.56250,  0.56085,
    0.55922,  0.55760,  0.55598,  0.55439,  0.55280,  0.55122,  0.54966,  0.54810,  0.54656,
    0.54503,  0.54351,  0.54200,  0.54050,  0.53902,  0.53754,  0.53607,  0.53462,  0.53317,
    0.53173,  0.53031,  0.52889,  0.52749,  0.52609,  0.52471,  0.52333,  0.52196,  0.52060,
    0.51926,  0.51792,  0.51658,  0.51526,  0.51395,  0.51265,  0.51135,  0.51006,  0.50879,
    0.50752,  0.50626,  0.50500,  0.50376,  0.50252,  0.50129,  0.50007,  0.49886,  0.49765,
    0.49645,  0.49526,  0.49408,  0.49290,  0.49174,  0.49058,  0.48942,  0.48828,  0.48714,
    0.48601,  0.48488,  0.48377,  0.48265,  0.48155,  0.48045,  0.47936,  0.47828,  0.47720,
    0.47613,  0.47507,  0.47401,  0.47296,  0.47192,  0.47088,  0.46985,  0.46882,  0.46780,
    0.46679,  0.46578,  0.46477,  0.46378,  0.46279,  0.46180,  0.46082,  0.45985,  0.45888,
    0.45792,  0.45696,  0.45601,  0.45506,  0.45412,  0.45319,  0.45225,  0.45133,  0.45041,
    0.44949,  0.44859,  0.44768,  0.44678,  0.44589,  0.44500,  0.44411,  0.44323,  0.44236,
    0.44149,  0.44062,  0.43977,  0.43891,  0.43806,  0.43721,  0.43637,  0.43553,  0.43470,
    0.43387,  0.43305,  0.43223,  0.43141,  0.43060,  0.42979,  0.42899,  0.42819,  0.42740,
    0.42661,  0.42582,  0.42504,  0.42426,  0.42349,  0.42272,  0.42195,  0.42119,  0.42043,
    0.41968,  0.41892,  0.41818,  0.41744,  0.41669,  0.41596,  0.41523,  0.41450,  0.41378,
    0.41306,  0.41234,  0.41162,  0.41091,  0.41021,  0.40951,  0.40880,  0.40811,  0.40742,
    0.40673,  0.40604,  0.40536,  0.40468,  0.40400,  0.40333,  0.40266,  0.40199,  0.40133,
    0.40067,  0.40001,  0.39936,  0.39871,  0.39806,  0.39742,  0.39678,  0.39614,  0.39550,
    0.39487,  0.39424,  0.39361,  0.39299,  0.39237,  0.39175,  0.39113,  0.39052,  0.38991,
    0.38930,  0.38870,  0.38810,  0.38750,  0.38690,  0.38631,  0.38572,  0.38513,  0.38455,
    0.38397,  0.38339,  0.38281,  0.38223,  0.38166,  0.38109,  0.38053,  0.37996,  0.37940,
    0.37884,  0.37828,  0.37773,  0.37718,  0.37663,  0.37608,  0.37554,  0.37499,  0.37445,
    0.37391,  0.37338,  0.37285,  0.37232,  0.37179,  0.37126,  0.37074,  0.37021,  0.36969,
    0.36918,  0.36866,  0.36815,  0.36764,  0.36713,  0.36662,  0.36612,  0.36561,  0.36511,
    0.36461,  0.36412,  0.36362,  0.36313,  0.36264,  0.36215,  0.36167,  0.36118,  0.36070,
    0.36022,  0.35974,  0.35927,  0.35879,  0.35832,  0.35785,  0.35738,  0.35691,  0.35645,
    0.35599,  0.35553,  0.35507,  0.35461,  0.35415,  0.35370,  0.35325,  0.35280,  0.35235,
    0.35190,  0.35146,  0.35102,  0.35058,  0.35014,  0.34970,  0.34926,  0.34883,  0.34840,
    0.34797,  0.34753,  0.34711,  0.34668,  0.34626,  0.34584,  0.34541,  0.34499,  0.34458,
    0.34416,  0.34375,  0.34333,  0.34292,  0.34251,  0.34210,  0.34169,  0.34129,  0.34088,
    0.34048,  0.34008,  0.33968,  0.33928,  0.33889,  0.33849,  0.33810,  0.33771,  0.33732,
    0.33693,  0.33654,  0.33615,  0.33577,  0.33539,  0.33500,  0.33462,  0.33425,  0.33387,
    0.33349,  0.33312,  0.33274,  0.33237,  0.33200,  0.33163,  0.33126,  0.33089,  0.33053,
    0.33016,  0.32980,  0.32944,  0.32908,  0.32872,  0.32836,  0.32801,  0.32765,  0.32730,
    0.32695,  0.32659,  0.32624,  0.32589,  0.32555,  0.32520,  0.32486,  0.32451,  0.32417,
    0.32383,  0.32349,  0.32315,  0.32281,  0.32247,  0.32214,  0.32180,  0.32147,  0.32114,
    0.32080,  0.32047,  0.32014,  0.31982,  0.31949,  0.31916,  0.31884,  0.31851,  0.31819,
    0.31787,  0.31755,  0.31723,  0.31691,  0.31660,  0.31628
};

////Total stopping power (I=75 eV)  from Geant4
CUDA_CONSTANT const float range_steps[600] = {
    0.001391,   0.010586,   0.027285,   0.050344,   0.079284,   0.113983,   0.154354,   0.200174,
    0.251242,   0.307367,   0.368453,   0.434431,   0.505264,   0.580871,   0.661183,   0.746137,
    0.835679,   0.929781,   1.028410,   1.131510,   1.239030,   1.350930,   1.467180,   1.587760,
    1.712630,   1.841780,   1.975160,   2.112750,   2.254520,   2.400440,   2.550490,   2.704650,
    2.862880,   3.025170,   3.191490,   3.361830,   3.536150,   3.714440,   3.896680,   4.082860,
    4.272950,   4.466930,   4.664780,   4.866490,   5.072050,   5.281430,   5.494620,   5.711600,
    5.932350,   6.156870,   6.385130,   6.617110,   6.852820,   7.092220,   7.335310,   7.582070,
    7.832500,   8.086580,   8.344290,   8.605610,   8.870550,   9.139080,   9.411180,   9.686850,
    9.966070,   10.248800,  10.535100,  10.824900,  11.118200,  11.415000,  11.715300,  12.019100,
    12.326400,  12.637100,  12.951400,  13.269100,  13.590400,  13.915300,  14.243700,  14.575800,
    14.911400,  15.250600,  15.593400,  15.939900,  16.289900,  16.643600,  17.000900,  17.361800,
    17.726300,  18.094500,  18.466300,  18.841700,  19.220700,  19.603300,  19.989400,  20.379200,
    20.772400,  21.169200,  21.569500,  21.973300,  22.380600,  22.791400,  23.205700,  23.623400,
    24.044600,  24.469300,  24.897500,  25.329100,  25.764100,  26.202600,  26.644600,  27.089900,
    27.538700,  27.990900,  28.446600,  28.905600,  29.368000,  29.833900,  30.303100,  30.775700,
    31.251600,  31.730900,  32.213600,  32.699600,  33.188900,  33.681500,  34.177500,  34.676800,
    35.179400,  35.685400,  36.194600,  36.707100,  37.222900,  37.741900,  38.264300,  38.789900,
    39.318800,  39.850900,  40.386300,  40.924900,  41.466700,  42.011800,  42.560100,  43.111600,
    43.666400,  44.224300,  44.785400,  45.349700,  45.917200,  46.487900,  47.061800,  47.638800,
    48.219000,  48.802400,  49.388900,  49.978500,  50.571300,  51.167200,  51.766200,  52.368300,
    52.973600,  53.582000,  54.193400,  54.808000,  55.425700,  56.046400,  56.670200,  57.297100,
    57.927100,  58.560100,  59.196200,  59.835300,  60.477500,  61.122700,  61.771000,  62.422300,
    63.076600,  63.733900,  64.394300,  65.057600,  65.723900,  66.393300,  67.065600,  67.740900,
    68.419200,  69.100500,  69.784800,  70.472000,  71.162100,  71.855200,  72.551300,  73.250300,
    73.952300,  74.657100,  75.364900,  76.075700,  76.789300,  77.505900,  78.225300,  78.947700,
    79.672900,  80.401100,  81.132100,  81.866000,  82.602800,  83.342500,  84.085000,  84.830400,
    85.578700,  86.329700,  87.083700,  87.840500,  88.600100,  89.362500,  90.127800,  90.895900,
    91.666800,  92.440500,  93.217100,  93.996400,  94.778500,  95.563400,  96.351100,  97.141600,
    97.934900,  98.730900,  99.529700,  100.331000, 101.136000, 101.943000, 102.753000, 103.565000,
    104.380000, 105.199000, 106.019000, 106.843000, 107.669000, 108.498000, 109.330000, 110.164000,
    111.001000, 111.841000, 112.683000, 113.528000, 114.376000, 115.227000, 116.080000, 116.936000,
    117.794000, 118.656000, 119.519000, 120.386000, 121.255000, 122.127000, 123.001000, 123.878000,
    124.758000, 125.640000, 126.525000, 127.413000, 128.303000, 129.196000, 130.091000, 130.989000,
    131.890000, 132.793000, 133.699000, 134.607000, 135.518000, 136.432000, 137.348000, 138.267000,
    139.188000, 140.112000, 141.038000, 141.967000, 142.898000, 143.832000, 144.769000, 145.708000,
    146.649000, 147.593000, 148.540000, 149.489000, 150.441000, 151.395000, 152.352000, 153.311000,
    154.273000, 155.237000, 156.203000, 157.173000, 158.144000, 159.118000, 160.095000, 161.074000,
    162.055000, 163.039000, 164.026000, 165.015000, 166.006000, 167.000000, 167.996000, 168.995000,
    169.996000, 170.999000, 172.005000, 173.013000, 174.024000, 175.037000, 176.053000, 177.071000,
    178.091000, 179.114000, 180.139000, 181.167000, 182.197000, 183.229000, 184.264000, 185.301000,
    186.341000, 187.383000, 188.427000, 189.473000, 190.522000, 191.574000, 192.627000, 193.683000,
    194.742000, 195.802000, 196.865000, 197.931000, 198.998000, 200.068000, 201.141000, 202.215000,
    203.292000, 204.372000, 205.453000, 206.537000, 207.623000, 208.712000, 209.802000, 210.895000,
    211.991000, 213.088000, 214.188000, 215.290000, 216.395000, 217.502000, 218.611000, 219.722000,
    220.835000, 221.951000, 223.069000, 224.189000, 225.312000, 226.436000, 227.563000, 228.693000,
    229.824000, 230.958000, 232.093000, 233.232000, 234.372000, 235.514000, 236.659000, 237.806000,
    238.955000, 240.106000, 241.260000, 242.416000, 243.574000, 244.734000, 245.896000, 247.060000,
    248.227000, 249.396000, 250.567000, 251.740000, 252.915000, 254.093000, 255.272000, 256.454000,
    257.638000, 258.824000, 260.012000, 261.202000, 262.395000, 263.589000, 264.786000, 265.985000,
    267.186000, 268.389000, 269.594000, 270.802000, 272.011000, 273.223000, 274.436000, 275.652000,
    276.870000, 278.090000, 279.312000, 280.536000, 281.762000, 282.990000, 284.221000, 285.453000,
    286.688000, 287.924000, 289.163000, 290.404000, 291.646000, 292.891000, 294.138000, 295.387000,
    296.638000, 297.891000, 299.146000, 300.403000, 301.662000, 302.924000, 304.187000, 305.452000,
    306.719000, 307.989000, 309.260000, 310.533000, 311.808000, 313.086000, 314.365000, 315.646000,
    316.930000, 318.215000, 319.502000, 320.792000, 322.083000, 323.376000, 324.672000, 325.969000,
    327.268000, 328.569000, 329.873000, 331.178000, 332.485000, 333.794000, 335.105000, 336.418000,
    337.733000, 339.050000, 340.369000, 341.689000, 343.012000, 344.337000, 345.663000, 346.992000,
    348.322000, 349.655000, 350.989000, 352.325000, 353.664000, 355.004000, 356.346000, 357.690000,
    359.035000, 360.383000, 361.733000, 363.084000, 364.438000, 365.793000, 367.150000, 368.509000,
    369.870000, 371.233000, 372.598000, 373.964000, 375.333000, 376.703000, 378.076000, 379.450000,
    380.826000, 382.203000, 383.583000, 384.965000, 386.348000, 387.733000, 389.121000, 390.509000,
    391.900000, 393.293000, 394.687000, 396.084000, 397.482000, 398.882000, 400.284000, 401.687000,
    403.093000, 404.500000, 405.909000, 407.320000, 408.733000, 410.147000, 411.564000, 412.982000,
    414.402000, 415.823000, 417.247000, 418.672000, 420.099000, 421.528000, 422.959000, 424.392000,
    425.826000, 427.262000, 428.700000, 430.139000, 431.581000, 433.024000, 434.469000, 435.915000,
    437.364000, 438.814000, 440.266000, 441.720000, 443.175000, 444.632000, 446.091000, 447.552000,
    449.014000, 450.478000, 451.944000, 453.412000, 454.881000, 456.352000, 457.825000, 459.300000,
    460.776000, 462.254000, 463.734000, 465.215000, 466.698000, 468.183000, 469.670000, 471.158000,
    472.648000, 474.140000, 475.633000, 477.128000, 478.625000, 480.123000, 481.623000, 483.125000,
    484.629000, 486.134000, 487.641000, 489.149000, 490.659000, 492.171000, 493.685000, 495.200000,
    496.717000, 498.236000, 499.756000, 501.278000, 502.801000, 504.326000, 505.853000, 507.382000,
    508.912000, 510.444000, 511.977000, 513.512000, 515.049000, 516.587000, 518.127000, 519.669000,
    521.212000, 522.757000, 524.303000, 525.851000, 527.401000, 528.952000, 530.505000, 532.060000,
    533.616000, 535.174000, 536.733000, 538.294000, 539.857000, 541.421000, 542.987000, 544.554000,
    546.123000, 547.694000, 549.266000, 550.840000, 552.415000, 553.992000, 555.570000, 557.151000
};

///< delta_ionization
///< analytical model
template<typename R>
class p_ionization_tabulated : public interaction<R, mqi::PROTON>
{
    ///< constant value to calculate scattering angle
    const R Es = 13.9;   // I 75 eV
    ///< Cross-section & restricted stopping power
    ///< Table's energy step: Ei, Ef, dE
    const R  Ei;
    const R  Ef;
    const R  E_step;
    const R* cs_table;
    const R* pw_table;

    ///< Energy and range table
    const R* r_steps;

public:
    CUDA_HOST_DEVICE
    p_ionization_tabulated(R m, R M, R s, const R* p, const R* q, const R* r) :
        Ei(m), Ef(M), E_step(s), cs_table(p), pw_table(q), r_steps(r) {}

    CUDA_HOST_DEVICE
    ~p_ionization_tabulated() {
        cs_table = nullptr;
        pw_table = nullptr;
        r_steps  = nullptr;
    }

    ///< Cross-section
    CUDA_HOST_DEVICE
    R
    cross_section(const relativistic_quantities<R>& rel, material_t<R>*& mat, R rho_mass) {
        R cs = 0;
        if (rel.Ek >= Ei && rel.Ek <= Ef) {
            uint16_t idx0 = uint16_t((rel.Ek - Ei) / this->E_step);
            uint16_t idx1 = idx0 + 1;
            R        x0   = this->Ei + idx0 * this->E_step;
            R        x1   = x0 + this->E_step;
            cs            = mqi::intpl1d<R>(rel.Ek, x0, x1, cs_table[idx0], cs_table[idx1]);
        }
        cs *= rho_mass;
        //        cs *= (0.0001 / mat.rho_mass);
        return cs;
    }

    ///< dEdx
    CUDA_HOST_DEVICE
    virtual inline R
    dEdx(const relativistic_quantities<R>& rel, material_t<R>*& mat) {
        R pw = 0;
        if (rel.Ek >= Ei && rel.Ek <= Ef) {
            uint16_t idx0 = uint16_t((rel.Ek - Ei) / this->E_step);
            uint16_t idx1 = idx0 + 1;
            R        x0   = Ei + idx0 * this->E_step;
            R        x1   = x0 + this->E_step;
            pw            = mqi::intpl1d<R>(rel.Ek, x0, x1, pw_table[idx0], pw_table[idx1]);
        } else if (rel.Ek < Ei && rel.Ek > 0) {
            pw = pw_table[0];
            assert(pw >= 0);
        }
        return -1.0 * pw;
    }

    ///< sample delta-energy
    CUDA_HOST_DEVICE
    inline R
    sample_delta_energy(const R Te_max, const mqi_rng* rng) {
        R eta = mqi_uniform<R>(rng);
        return Te_max * this->T_cut / ((1.0 - eta) * Te_max + eta * this->T_cut);
    }

    ///< Energy loss (positive)
    CUDA_HOST_DEVICE
    virtual inline R
    energy_loss(const relativistic_quantities<R>& rel,
                material_t<R>*&                   mat,
                R                                 rho_mass,
                const R                           step_length,
                mqi_rng*                          rng) {
        ///< n is left index of energy & range steps table
        R length_in_water =
          step_length * mat->compute_rsp_(rho_mass, rel.Ek) * rho_mass / this->units.water_density;
        uint16_t n  = uint16_t((rel.Ek - this->Ei) / this->E_step);
        R        x0 = this->Ei + n * this->E_step;
        R        x1 = x0 + this->E_step;
        if (x0 > rel.Ek) n -= 1;
        if (x1 < rel.Ek) n += 1;
        R r = mqi::intpl1d(rel.Ek, x0, x1, r_steps[n], r_steps[n + 1]);
        if (r < length_in_water) return rel.Ek;   //< maximum energy loss
        r -= length_in_water;                     //< update residual range
        ///< find new 'n' for new energy ranges for interpolation
        do {
            if (r >= r_steps[n]) break;
        } while (--n > 0);
        x0        = this->Ei + n * this->E_step;
        x1        = x0 + this->E_step;
        R dE_mean = rel.Ek - mqi::intpl1d(r, r_steps[n], r_steps[n + 1], x0, x1);
        ///< if energy loss is less than 1% of kinetic energy (Geant4)
        ///< the energy loss is then calculated from dEdx
        ///< but moqui 1% gives step on BP for low energy, such as 70 MeV
        R dE_var = this->energy_straggling(rel, mat, length_in_water, rho_mass);
        R ret    = mqi::mqi_normal(rng, dE_mean, mqi::mqi_sqrt(dE_var));
        if (ret < 0) ret *= -1.0;
        return ret;
    }

    ///< energy_straggling variance
    CUDA_HOST_DEVICE
    inline R
    energy_straggling(const relativistic_quantities<R>& rel,
                      material_t<R>*&                   mat,
                      const R                           step_length,
                      R                                 rho_mass) {
        R Te   = (rel.Te_max >= 0.08511) ? 0.08511 : rel.Te_max;
        R O_sq = mat->dedx_term0() * rho_mass / this->units.water_density * step_length;
        O_sq *= Te / rel.beta_sq * (1.0 - 0.5 * rel.beta_sq);

        return O_sq;
    }

    ///< CSDA method is special to p_ionization
    CUDA_HOST_DEVICE
    virtual void
    along_step(track_t<R>&       trk,
               track_stack_t<R>& stk,
               mqi_rng*          rng,
               const R           len,
               material_t<R>*&   mat,
               R                 rho_mass) {
        mqi::relativistic_quantities<R> rel(trk.vtx0.ke, this->units.Mp);
        ///< CSDA energy loss
#ifdef DEBUG
        printf("len %f rsp %f density %f water density %f length in water %f mm\n",
               len,
               mat.stopping_power_ratio(rel.Ek),
               rho_mass,
               this->units.water_density,
               len * mat.stopping_power_ratio(rel.Ek) * rho_mass / this->units.water_density);
#endif
        R dE = this->energy_loss(rel, mat, rho_mass, len, rng);
        ///< Update track (KE & POS & DIR)
        R r = 1.0;
        if (dE >= trk.vtx0.ke) {
            r = trk.vtx0.ke / dE;
            trk.stop();
        }
        if (dE * r >= 0) {
        } else {
            printf("mat %f %f\n", rho_mass, mat->compute_rsp_(rho_mass, rel.Ek));
            printf("dE %f r %f len %f\n", dE, r, len);
        }
        assert(dE * r >= 0);
        ///< Multiple Coulomb SCattering (MSC)
        R P = rel.momentum();
        R radiation_length_mat =
          mat->compute_rl_(rho_mass, this->units.water_density, this->units.radiation_length_water);

        R th_sq = ((this->Es / P) * (this->Es / P) / rel.beta_sq) * len / radiation_length_mat;
        R th    = mqi::mqi_sqrt(th_sq);
        th      = mqi::mqi_normal<R>(rng, 0, mqi::mqi_sqrt(2.0f) * th);
        if (th < 0) th *= -1.0;
        R phi = 2.0 * M_PI * mqi::mqi_uniform<R>(rng);
#if !defined(__CUDACC__)
        if (std::isnan(th) || std::isnan(phi) || std::isinf(th) || std::isinf(phi))
            printf("p ion1 dE %f ke %f Es %f P %f len %f th_sq %f th %f phi %f\n",
                   dE,
                   trk.vtx0.ke,
                   this->Es,
                   P,
                   len,
                   th_sq,
                   th,
                   phi);
        if (std::isnan(r)) printf("p ion1 r %f\n", r);
#endif
        trk.update_post_vertex_direction(th, phi);
        if (mqi::mqi_abs(trk.vtx0.dir.dot(trk.vtx1.dir) /
                           (trk.vtx0.dir.norm() * trk.vtx1.dir.norm()) -
                         mqi::mqi_cos(th)) < 1e-3) {
        } else {
            printf("cos(th) %f dot %f\n",
                   mqi::mqi_cos(th),
                   trk.vtx0.dir.dot(trk.vtx1.dir) / (trk.vtx0.dir.norm() * trk.vtx1.dir.norm()));
            printf("vtx0 ");
            trk.vtx0.dir.dump();
            printf("vtx1 ");
            trk.vtx1.dir.dump();
        }
        assert(mqi::mqi_abs(trk.vtx0.dir.dot(trk.vtx1.dir) /
                              (trk.vtx0.dir.norm() * trk.vtx1.dir.norm()) -
                            mqi::mqi_cos(th)) < 1e-3);
        trk.deposit(dE * r);
        trk.update_post_vertex_position(r * len);
        trk.update_post_vertex_energy(dE * r);
    }

    ///< DoIt method to update track's KE, pos, dir, dE, status
    ///< compute energy loss, vertex, secondaries
    CUDA_HOST_DEVICE
    virtual void
    post_step(track_t<R>&       trk,
              track_stack_t<R>& stk,
              mqi_rng*          rng,
              const R           len,
              material_t<R>*&   mat,
              bool              score_local_deposit) {

        //This method in p_ion should get called after CSDA
        mqi::relativistic_quantities<R> rel(trk.vtx1.ke, this->units.Mp);

        ///< Delta generation (local absorb)
        R Te, n;

        /// Sampling and Rejection from Geant4
        while (true) {
            n  = mqi::mqi_uniform<R>(rng);
            Te = this->T_cut * rel.Te_max;
            Te /= ((1.0 - n) * rel.Te_max + n * this->T_cut);
            if (mqi::mqi_uniform<R>(rng) <
                1.0 - rel.beta_sq * Te / rel.Te_max + Te * Te / (2.0 * rel.Et_sq)) {
                break;
            }
        }
        assert(Te >= 0);

        ///< Te is assumed to be absorbed locally
        /// Remove in release
#ifdef __PHYSICS_DEBUG__
        track_t<R> daughter(trk);
        daughter.dE      = Te;
        daughter.primary = false;
        daughter.process = mqi::D_ION;
        //        daughter.its.dist = 0.0;
        //        daughter.its.dist = len;
        daughter.vtx0.ke = 0;
        daughter.vtx1.ke = 0;
        daughter.status  = CREATED;
        //        daughter.vtx0.pos = trk.c_node->geo->rotation_matrix_fwd * daughter.vtx0.pos;
        daughter.vtx0.pos = trk.c_node->geo->rotation_matrix_fwd *
                              (daughter.vtx0.pos - trk.c_node->geo->translation_vector) +
                            trk.c_node->geo->translation_vector;
        daughter.vtx0.dir = trk.c_node->geo->rotation_matrix_fwd * daughter.vtx0.dir;
        daughter.vtx1.pos = trk.c_node->geo->rotation_matrix_fwd *
                              (daughter.vtx1.pos - trk.c_node->geo->translation_vector) +
                            trk.c_node->geo->translation_vector;
        daughter.vtx1.dir = trk.c_node->geo->rotation_matrix_fwd * daughter.vtx1.dir;
        daughter.init_E   = Te;
        stk.push_secondary(daughter);
#else
        trk.deposit(Te);
#endif
        trk.update_post_vertex_energy(Te);
    }

    ///< DoIt method to update track's KE, pos, dir, dE, status
    ///< compute energy loss, vertex, secondaries
    CUDA_HOST_DEVICE
    virtual void
    last_step(track_t<R>& trk, material_t<R>*& mat, R rho_mass) {
        mqi::relativistic_quantities<R> rel(trk.vtx0.ke, this->units.Mp);
        R                               length_in_water = 0;
        if (trk.dE > 0) length_in_water = -trk.dE / this->dEdx(rel, mat);
        R step_length = length_in_water * this->units.water_density /
                        (mat->compute_rsp_(rho_mass, trk.vtx0.ke) * rho_mass);
        trk.update_post_vertex_position(step_length);
    }
};

}   // namespace mqi

#endif